package cn.maxpeedinggrods.rms.mailServer.mailin.controller;

import cn.maxpeedinggrods.rms.mailServe.mailin.entity.MailServer;
import cn.maxpeedinggrods.rms.mailServe.mailin.entity.MailShop;
import cn.maxpeedinggrods.rms.mailServe.mailin.service.IMailServerService;
import cn.maxpeedinggrods.rms.mailServe.mailin.service.IMailShopService;
import cn.maxpeedinggrods.rms.mailServe.mailin.vo.MailServerPage;
import com.alibaba.fastjson.JSON;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import lombok.extern.slf4j.Slf4j;
import org.jeecg.common.api.vo.Result;
import org.jeecg.common.system.query.QueryGenerator;
import org.jeecg.common.util.oConvertUtils;
import org.jeecgframework.poi.excel.ExcelImportUtil;
import org.jeecgframework.poi.excel.def.NormalExcelConstants;
import org.jeecgframework.poi.excel.entity.ExportParams;
import org.jeecgframework.poi.excel.entity.ImportParams;
import org.jeecgframework.poi.excel.view.JeecgEntityExcelView;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
* @Description: 邮箱服务器
* @Author: jeecg-boot
* @Date:   2019-09-17
* @Version: V1.0
*/
@RestController
@RequestMapping("/mailin/mailServer")
@Slf4j
public class MailServerController {
   @Autowired
   private IMailServerService mailServerService;
   @Autowired
   private IMailShopService mailShopService;

   /**
     * 分页列表查询
    * @param mailServer
    * @param pageNo
    * @param pageSize
    * @param req
    * @return
    */
   @GetMapping(value = "/list")
   public Result<IPage<MailServer>> queryPageList(MailServer mailServer,
                                                  @RequestParam(name="pageNo", defaultValue="1") Integer pageNo,
                                                  @RequestParam(name="pageSize", defaultValue="10") Integer pageSize,
                                                  HttpServletRequest req) {
       Result<IPage<MailServer>> result = new Result<IPage<MailServer>>();
       QueryWrapper<MailServer> queryWrapper = QueryGenerator.initQueryWrapper(mailServer, req.getParameterMap());
       Page<MailServer> page = new Page<MailServer>(pageNo, pageSize);
       IPage<MailServer> pageList = mailServerService.page(page, queryWrapper);
       result.setSuccess(true);
       result.setResult(pageList);
       return result;
   }

   /**
     *   添加
    * @param mailServerPage
    * @return
    */
   @PostMapping(value = "/add")
   public Result<MailServer> add(@RequestBody MailServerPage mailServerPage) {
       Result<MailServer> result = new Result<MailServer>();
       try {
           MailServer mailServer = new MailServer();
           BeanUtils.copyProperties(mailServerPage, mailServer);

           mailServerService.saveMain(mailServer, mailServerPage.getMailShopList());
           result.success("添加成功！");
       } catch (Exception e) {
           log.error(e.getMessage(),e);
           result.error500("操作失败");
       }
       return result;
   }

   /**
     *  编辑
    * @param mailServerPage
    * @return
    */
   @PutMapping(value = "/edit")
   public Result<MailServer> edit(@RequestBody MailServerPage mailServerPage) {
       Result<MailServer> result = new Result<MailServer>();
       MailServer mailServer = new MailServer();
       BeanUtils.copyProperties(mailServerPage, mailServer);
       MailServer mailServerEntity = mailServerService.getById(mailServer.getId());
       if(mailServerEntity==null) {
           result.error500("未找到对应实体");
       }else {
           boolean ok = mailServerService.updateById(mailServer);
           mailServerService.updateMain(mailServer, mailServerPage.getMailShopList());
           result.success("修改成功!");
       }

       return result;
   }

   /**
     *   通过id删除
    * @param id
    * @return
    */
   @DeleteMapping(value = "/delete")
   public Result<?> delete(@RequestParam(name="id",required=true) int id) {
       try {
           mailServerService.delMain(id);
       } catch (Exception e) {
           log.error("删除失败",e.getMessage());
           return Result.error("删除失败!");
       }
       return Result.ok("删除成功!");
   }

   /**
     *  批量删除
    * @param ids
    * @return
    */
   @DeleteMapping(value = "/deleteBatch")
   public Result<MailServer> deleteBatch(@RequestParam(name="ids",required=true) String ids) {
       Result<MailServer> result = new Result<MailServer>();
       if(ids==null || "".equals(ids.trim())) {
           result.error500("参数不识别！");
       }else {
           String[] sids=ids.split(",");
           List<Integer> iids=new ArrayList<>();
           for(int i=0;i<sids.length;i++){
               iids.add(Integer.parseInt(sids[i]));
           }
            this.mailServerService.delBatchMain(iids);
           result.success("删除成功!");
       }
       return result;
   }

   /**
     * 通过id查询
    * @param id
    * @return
    */
   @GetMapping(value = "/queryById")
   public Result<MailServer> queryById(@RequestParam(name="id",required=true) String id) {
       Result<MailServer> result = new Result<MailServer>();
       MailServer mailServer = mailServerService.getById(id);
       if(mailServer==null) {
           result.error500("未找到对应实体");
       }else {
           result.setResult(mailServer);
           result.setSuccess(true);
       }
       return result;
   }

   /**
     * 通过id查询
    * @param id
    * @return
    */
   @GetMapping(value = "/queryMailShopByMainId")
   public Result<List<MailShop>> queryMailShopListByMainId(@RequestParam(name="id",required=true) int id) {
       Result<List<MailShop>> result = new Result<List<MailShop>>();
       List<MailShop> mailShopList = mailShopService.selectByMainId(id);
       result.setResult(mailShopList);
       result.setSuccess(true);
       return result;
   }

 /**
     * 导出excel
  *
  * @param request
  * @param response
  */
 @RequestMapping(value = "/exportXls")
 public ModelAndView exportXls(HttpServletRequest request, HttpServletResponse response) {
     // Step.1 组装查询条件
     QueryWrapper<MailServer> queryWrapper = null;
     try {
         String paramsStr = request.getParameter("paramsStr");
         if (oConvertUtils.isNotEmpty(paramsStr)) {
             String deString = URLDecoder.decode(paramsStr, "UTF-8");
             MailServer mailServer = JSON.parseObject(deString, MailServer.class);
             queryWrapper = QueryGenerator.initQueryWrapper(mailServer, request.getParameterMap());
         }
     } catch (UnsupportedEncodingException e) {
         e.printStackTrace();
     }

     //Step.2 AutoPoi 导出Excel
     ModelAndView mv = new ModelAndView(new JeecgEntityExcelView());
     List<MailServerPage> pageList = new ArrayList<MailServerPage>();
     List<MailServer> mailServerList = mailServerService.list(queryWrapper);
     for (MailServer mailServer : mailServerList) {
         MailServerPage vo = new MailServerPage();
         BeanUtils.copyProperties(mailServer, vo);
         List<MailShop> mailShopList = mailShopService.selectByMainId(mailServer.getId());
         vo.setMailShopList(mailShopList);
         pageList.add(vo);
     }
     //导出文件名称
     mv.addObject(NormalExcelConstants.FILE_NAME, "邮箱服务器列表");
     mv.addObject(NormalExcelConstants.CLASS, MailServerPage.class);
     mv.addObject(NormalExcelConstants.PARAMS, new ExportParams("邮箱服务器列表数据", "导出人:Jeecg", "导出信息"));
     mv.addObject(NormalExcelConstants.DATA_LIST, pageList);
     return mv;
 }

 /**
     * 通过excel导入数据
  *
  * @param request
  * @param response
  * @return
  */
 @RequestMapping(value = "/importExcel", method = RequestMethod.POST)
 public Result<?> importExcel(HttpServletRequest request, HttpServletResponse response) {
     MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
     Map<String, MultipartFile> fileMap = multipartRequest.getFileMap();
     for (Map.Entry<String, MultipartFile> entity : fileMap.entrySet()) {
         MultipartFile file = entity.getValue();// 获取上传文件对象
         ImportParams params = new ImportParams();
         params.setTitleRows(2);
         params.setHeadRows(1);
         params.setNeedSave(true);
         try {
             List<MailServerPage> list = ExcelImportUtil.importExcel(file.getInputStream(), MailServerPage.class, params);
             for (MailServerPage page : list) {
                 MailServer po = new MailServer();
                 BeanUtils.copyProperties(page, po);
                 mailServerService.saveMain(po, page.getMailShopList());
             }
             return Result.ok("文件导入成功！数据行数:" + list.size());
         } catch (Exception e) {
             log.error(e.getMessage(),e);
             return Result.error("文件导入失败:"+e.getMessage());
         } finally {
             try {
                 file.getInputStream().close();
             } catch (IOException e) {
                 e.printStackTrace();
             }
         }
     }
     return Result.ok("文件导入失败！");
 }

}
